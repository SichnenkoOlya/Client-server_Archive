package by.bsuir.archive.socket;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;

import by.bsuir.server.Message;

public class SocketStream {

    protected Socket socket;
    protected ObjectInputStream input;
    protected ObjectOutputStream output;

    public  SocketStream(InetAddress acceptorHost, int acceptorPort) 
    		throws SocketException, IOException {
        socket = new Socket(acceptorHost, acceptorPort);
        setStreams();
    }

    public SocketStream(Socket socket) throws IOException {
        this.socket = socket;
        setStreams();
    }

    private void setStreams() throws IOException {
        // get an input stream for reading from the data socket
        input = new ObjectInputStream(socket.getInputStream());
        output = new ObjectOutputStream(socket.getOutputStream());
    }

    public void sendMessage(Message message) throws IOException {
        output.writeObject(message);
        output.flush();
    } // end sendMessage

    public Message receiveMessage() throws IOException {
        Message message=null;
		try {
			message = (Message) input.readObject();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        return message;
    } // end receiveMessage

    public void close() throws IOException {
        socket.close();
    }

} // end class