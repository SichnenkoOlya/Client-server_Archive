package by.bsuir.server.serialization;

import java.beans.XMLEncoder;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import by.bsuir.server.domain.Matter;

public class Serialization {
	public void writeXmlFile(ArrayList<Matter> list) {

	    try {

	        DocumentBuilderFactory dFact = DocumentBuilderFactory.newInstance();
	        DocumentBuilder build = dFact.newDocumentBuilder();
	        Document doc = build.newDocument();

	        Element root = doc.createElement("ArchiveInfo");
	        doc.appendChild(root);

	        Element matters = doc.createElement("Matter");
	        root.appendChild(matters);


	        for (Matter element : list) {
	        	
	            Element id = doc.createElement("ID");
	            id.appendChild(doc.createTextNode(String.valueOf(element.getId())));
	            matters.appendChild(id);

	            Element surname = doc.createElement("Surname");
	            surname.appendChild(doc.createTextNode(String.valueOf(element.getSurname())));
	            matters.appendChild(surname);
	            
	            Element name = doc.createElement("Name");
	            name.appendChild(doc.createTextNode(String.valueOf(element.getNameOfStudent())));
	            matters.appendChild(name);

	            Element age = doc.createElement("Age");
	            age.appendChild(doc.createTextNode(String.valueOf(element.getAgeOfStudent())));
	            matters.appendChild(age);
	            
	            Element univer = doc.createElement("University");
	            univer.appendChild(doc.createTextNode(String.valueOf(element.getUniversity())));
	            matters.appendChild(univer);
	            
	            Element group = doc.createElement("Group");
	            group.appendChild(doc.createTextNode(String.valueOf(element.getNumberOfGroup())));
	            matters.appendChild(group);

	        }

	        // Save the document to the disk file
	        TransformerFactory tranFactory = TransformerFactory.newInstance();
	        Transformer aTransformer = tranFactory.newTransformer();

	        // format the XML nicely
	        aTransformer.setOutputProperty(OutputKeys.ENCODING, "ISO-8859-1");

	        aTransformer.setOutputProperty(
	                "{http://xml.apache.org/xslt}indent-amount", "4");
	        aTransformer.setOutputProperty(OutputKeys.INDENT, "yes");

	        DOMSource source = new DOMSource(doc);
	        try {
	            // location and name of XML file you can change as per need
	            FileWriter fos = new FileWriter("./ARCIVE.xml");
	            StreamResult result = new StreamResult(fos);
	            aTransformer.transform(source, result);

	        } catch (IOException e) {

	            e.printStackTrace();
	        }

	    } catch (TransformerException ex) {
	        System.out.println("Error outputting document");

	    } catch (ParserConfigurationException ex) {
	        System.out.println("Error building document");
	    }
	}

    public static void writeXML(ArrayList<Matter> itemList){
        
    	//WriteFile ob = new WriteFile();
       // ArrayList list = new ArrayList();
       // list.add(new details("A", 20, 1));
       // list.add(new details("B", 30, 2));
    	// populate your array
    	XMLEncoder e;
		try {
			e = new XMLEncoder(new FileOutputStream("ARCHIVE.xml"));
	    	e.writeObject(itemList);
	    	e.close();
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
        //ob.writeXmlFile(list);
    }
}
